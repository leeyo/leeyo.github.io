<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Skynet&#39;s Blog</title>
    <link>https://leeyo.github.io/post/</link>
    <description>Recent content in Posts on Skynet&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 22 Jul 2019 16:19:37 +0800</lastBuildDate>
    
	<atom:link href="https://leeyo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Codis源码解析-proxy启动</title>
      <link>https://leeyo.github.io/2019/07/codis-analyze-proxy-start/</link>
      <pubDate>Mon, 22 Jul 2019 16:19:37 +0800</pubDate>
      
      <guid>https://leeyo.github.io/2019/07/codis-analyze-proxy-start/</guid>
      <description>启动Codis 启动参数说明 $ cd /opt/codis/admin # codis 自带了一个启动脚本 $ ./codis-proxy-admin.sh start # 执行后可以看到如下进程 $ ps aux|grep codis-proxy /opt/codis/admin/../bin/codis-proxy --config=/opt/codis/admin/../config/proxy.toml --dashboard=127.0.0.1:18080 --log=/srv/log/codis/codis-proxy.log --log-level=WARN --ncpu=12 --pidfile=/srv/log/codis/codis-proxy.pid  --config=/opt/codis/config/proxy.toml #用于指定proxy配置文件路径
--dashboard=127.0.0.1:18080 #用于指定dashboard地址
--log=/srv/log/codis/codis-proxy.log #用于指定日志路径
--log-level=WARN #用于指定日志输出等级
--ncpu=12 #请参考如下代码，这里要特别说明一下，如果不显式指明GOMAXPROCS的话，goroutine都是运行在同一个CPU核心上，一个goroutine得到时间片的时候，其他的goroutine都在等待。
--pidfile=/srv/log/codis/codis-proxy.pid # 指定pid文件
主程序的入口为cmd/proxy/main.go
独立的goroutine，根据负载自动调配GOMAXPROCS var ncpu int if n, ok := utils.ArgumentInteger(d, &amp;quot;--ncpu&amp;quot;); ok { ncpu = n //显式指明使用的cpu数量 } else { ncpu = 4	//默认使用cpu数量 } //设置cpu数量 runtime.GOMAXPROCS(ncpu) var maxncpu int if n, ok := utils.</description>
    </item>
    
    <item>
      <title>开始使用hugo</title>
      <link>https://leeyo.github.io/2019/07/hugo-start/</link>
      <pubDate>Sat, 20 Jul 2019 14:34:00 +0800</pubDate>
      
      <guid>https://leeyo.github.io/2019/07/hugo-start/</guid>
      <description>工作了这么长时间，一直都没有写blog的习惯，基本都是将笔记记录到了有道云笔记和onenote中。作为golang的新用户，最近沉迷于golang无法自拔，golang在并发编程的代码书写效率极高。 并且前段时间将公司的缓存系统，统一从redis迁移到了codis，非常方便进行运维、扩容、监控。 于是看了一下codis的源代码，codis的架构设计还是非常完善的，因此想写文章记录一下源码阅读的过程，从而发现了hugo。
什么是hugo  Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again.
Hugo 是一个Go写的静态网站生成工具，速度快，扩展性强。
 为什么选择hugo * 快！世界上最快的静态网站生成工具！5秒生成6000个页面！ * 超详细的文档，虽然是英文的 * 活跃的社区 * 更加自由的内容组织方式 * 丰富的主题，目前主题数量已经超过 Hexo  更多介绍请查看官网，https://gohugo.io/
hugo的安装 mac 平台 mac 下面提供了homebrew的安装方式
brew install hugo  Windows 平台 # 前往 https://github.com/gohugoio/hugo/releases # 下载 hugo_X.XX_Windows-64bit.zip # 解压得到 hugo.exe # 将 hugo.exe 所在目录添加至系统环境变量 # 安装完成！  Debian 和 Ubuntu 平台 sudo apt-get install hugo  验证安装是否成功</description>
    </item>
    
  </channel>
</rss>